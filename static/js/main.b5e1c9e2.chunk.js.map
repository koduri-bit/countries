{"version":3,"sources":["pages/CountryDetails.module.css","components/UI/SearchBox.module.css","components/Layout/TopHeader.module.css","components/UI/LoadingSpinner.module.css","components/UI/RegionDropDown.module.css","store/darkmode-context.js","components/UI/SearchBox.js","components/Countries/CountryItem.js","components/Countries/CountryList.js","hooks/use-http.js","lib/api.js","components/UI/LoadingSpinner.js","components/Countries/NoCountriesFound.js","components/UI/RegionDropDown.js","pages/AllCountries.js","pages/NotFound.js","components/Countries/BorderCountryList.js","pages/CountryDetail.js","components/Layout/MainSection.js","styles/GlobalFonts.js","components/Layout/Layout.js","components/Countries/RegionalCountries.js","components/Layout/TopHeader.js","App.js","index.js"],"names":["module","exports","DarkModeContext","React","createContext","isLoggedIn","handleToggleHandler","DarkModeContextProvider","props","useState","isDarkMode","setDarkMode","Provider","value","switchBtwDarkAndLight","prevMode","children","colors","darkModeBackgroundColour","lightModeBackgroundColour","topHeaderDarkBgCol","topHeaderLightBgCol","lightModeBoxShadow","darkModeBoxShadow","SearchBox","enteredCountry","setEnteredCountry","ctx","useContext","history","useHistory","styles","classes","stylesForSearch","className","style","backgroundColor","boxShadow","color","id","searchIconColor","type","onChange","event","target","onKeyDown","key","push","placeholder","Ptag","styled","p","CtryList","li","CountryImage","img","Div","div","CountryName","CountryItem","src","flagimage","name","population","region","capital","Countrylist","ul","CountryList","countries","map","country","httpReducer","state","action","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","a","message","RESTCOUNTRIES_DOMAIN","getAllCountries","fetch","response","json","ok","Error","countryObject","transformedCountries","countryName","countryObj","flag","getCountriesFromSingleRegion","regionId","getSingleCountry","countryId","countryInfoDataObj","length","loadedCountryInfo","getSingleCountryByThreeLetterCode","console","log","nativeName","subregion","borders","topLevelDomain","currencies","languages","loadedCountry","LoadingSpinner","spinner","NoCountriesFound","RegionDropDown","select_dropdown","defaultValue","preventDefault","pullCountriesFromSelectedRegion","disabled","AllCountries","loadedCountries","useEffect","centered","errorStyles","focused","selectedRegion","NotFound","StyledLink","Link","ListStyle","BorderCountryList","threeLetterCountryCode","borderCountry","to","DivForBTNandDetails","LeftArrowIcon","i","BackSpan","span","Details","CountryNamePtag","SpanBorder","ListOfLangEachCtry","CountryDetail","countryNameId","useParams","borderCountries","undefined","cssCountryDetails","ulStyle","arrayOfLangForEachCountry","lang","languagesOfEachCountry","ulLangStyle","index","eachLangList","backBtnLink","onClick","goBack","MainSec","MainSection","createGlobalStyle","Page","PageLayout","Main","Layout","GlobalFonts","RegionalCountries","regionNameId","HeaderSection","Where","Mode","LightOrDarkText","LightORDarkLogo1","TopHeader","stylesForToggleLight","pointer","App","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5e1c9e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sub-details\":\"CountryDetails_sub-details__2LFQI\",\"country-name\":\"CountryDetails_country-name__r3cXN\",\"full-details\":\"CountryDetails_full-details__1pyAJ\",\"ulStyle\":\"CountryDetails_ulStyle__3GV2I\",\"brdlist\":\"CountryDetails_brdlist__2VR2q\",\"backBtnLink\":\"CountryDetails_backBtnLink__2DOWw\",\"leftArrowBtn\":\"CountryDetails_leftArrowBtn__2rkN9\",\"ulLangStyle\":\"CountryDetails_ulLangStyle__R0iTT\",\"eachLangList\":\"CountryDetails_eachLangList__2J6zC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input-search-and-icon\":\"SearchBox_input-search-and-icon__1gWU0\",\"input_searchbox\":\"SearchBox_input_searchbox__2OEP3\",\"btn-search\":\"SearchBox_btn-search__1ty_-\",\"searchbox\":\"SearchBox_searchbox__UBpR7\",\"searchIconColor\":\"SearchBox_searchIconColor__2hXgv\",\"sts\":\"SearchBox_sts__2lT0f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topheader\":\"TopHeader_topheader__2gDIz\",\"where_in_the_world\":\"TopHeader_where_in_the_world__3X_-t\",\"light-mode\":\"TopHeader_light-mode__feqz7\",\"pointer\":\"TopHeader_pointer__1gKka\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"LoadingSpinner_spinner__1zFPD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select_dropdown\":\"RegionDropDown_select_dropdown__2ioUk\",\"dropdown\":\"RegionDropDown_dropdown__1a7eY\",\"option\":\"RegionDropDown_option__2k1ua\"};","import React, { useState } from 'react';\r\n\r\nconst DarkModeContext = React.createContext({\r\n    isLoggedIn: false,\r\n    handleToggleHandler: () => {},\r\n\r\n});\r\n\r\n\r\nexport const DarkModeContextProvider = (props) =>{\r\n\r\n    const [isDarkMode, setDarkMode] = useState(false);\r\n\r\n    const handleToggleHandler = () => {\r\n        setDarkMode( prevMode => {\r\n            return  !prevMode ;\r\n        } )\r\n    }\r\n\r\n    return(\r\n        <DarkModeContext.Provider\r\n            value={{\r\n                isDarkMode: isDarkMode,\r\n                switchBtwDarkAndLight: handleToggleHandler\r\n            }}\r\n        >\r\n\r\n            {props.children}\r\n        </DarkModeContext.Provider>\r\n\r\n    )\r\n}\r\nexport default DarkModeContext","import {  useState } from 'react';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport classes from './SearchBox.module.css';\r\n\r\nimport DarkModeContext from \"../../store/darkmode-context\";\r\nimport React, { useContext } from 'react';\r\n\r\nconst SearchBox = (props) => {\r\n\r\n    const [enteredCountry, setEnteredCountry] = useState('');\r\n    const ctx = useContext(DarkModeContext);\r\n    const history = useHistory();\r\n\r\n    const countrySearchHandler = (event) => {\r\n        setEnteredCountry(event.target.value);\r\n    };\r\n\r\n    const pressingEnterKeyForSearch = (event) =>{\r\n        if (event.key === 'Enter') {\r\n            history.push(`/country/${enteredCountry}`)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const styles =  classes['input_searchbox']\r\n    let stylesForSearch = ctx.isDarkMode ? `${classes['input-search-and-icon'] }` :\r\n                                         `${classes['input-search-and-icon']}` ;\r\n    return (\r\n            <div className={stylesForSearch}\r\n                 style={{backgroundColor : ctx.isDarkMode ? colors.topHeaderDarkBgCol : colors.topHeaderLightBgCol,\r\n                         boxShadow:ctx.isDarkMode ? colors.darkModeBoxShadow : colors.lightModeBoxShadow,\r\n                         color:  ctx.isDarkMode ? 'white': 'black'}} id='search' >\r\n                <button className={classes['btn-search']} >\r\n                    <i className={`fa fa-search ${classes.searchIconColor}`} ></i>\r\n                </button>\r\n               <input\r\n                    className={styles}\r\n                    type='text'\r\n                    value={enteredCountry}\r\n                    onChange={countrySearchHandler}\r\n                    onKeyDown={pressingEnterKeyForSearch}\r\n                    placeholder=\"Search for a country...\"\r\n                    style={{backgroundColor : ctx.isDarkMode ? colors.topHeaderDarkBgCol : colors.topHeaderLightBgCol,\r\n                            color:  ctx.isDarkMode ? 'white': 'black'}}\r\n\r\n                />\r\n\r\n            </div>\r\n    )\r\n}\r\n\r\n\r\nexport const colors = {\r\n    darkModeBackgroundColour : 'hsl(207, 26%, 17%)' ,\r\n    lightModeBackgroundColour : 'hsl(0, 0%, 98%)',\r\n    topHeaderDarkBgCol : 'hsl(207, 16%, 22%)',\r\n    topHeaderLightBgCol : '#ffffff',\r\n\r\n    lightModeBoxShadow: '0 0 .5em 0 rgb(235, 229, 229)',\r\n    darkModeBoxShadow:  '0 0 .5em 0 rgb(37, 40, 43)',\r\n}\r\n\r\n\r\nexport default SearchBox\r\n\r\n\r\n","import styled from 'styled-components';\r\n\r\nimport DarkModeContext from \"../../store/darkmode-context\";\r\n\r\nimport React, { useContext } from 'react';\r\nimport {colors} from \"../UI/SearchBox\";\r\n\r\nconst CountryItem = (props) => {\r\n\r\n    const ctx = useContext(DarkModeContext);\r\n\r\n    return (\r\n        <CtryList style={{backgroundColor : ctx.isDarkMode ? colors.topHeaderDarkBgCol : colors.topHeaderLightBgCol,\r\n                          color:  ctx.isDarkMode ? 'white': 'black',\r\n                          boxShadow:ctx.isDarkMode ? colors.darkModeBoxShadow : colors.lightModeBoxShadow}}  >\r\n\r\n            <CountryImage src={props.flagimage} {...props}/>\r\n            <Div>\r\n                <CountryName id='countryname'>{props.name}</CountryName>\r\n                <Ptag ctx={ctx}><strong >Population:</strong> {props.population}</Ptag>\r\n                <Ptag ctx={ctx}><strong >Region: </strong>{props.region}</Ptag>\r\n                <Ptag ctx={ctx}><strong >Capital: </strong> {props.capital}</Ptag>\r\n            </Div>\r\n\r\n\r\n        </CtryList>\r\n    )\r\n}\r\n\r\nconst Ptag = styled.p`\r\n     color: ${props => (props.ctx.isDarkMode ? 'white' : 'hsl(0, 100%, 5%)')}; \r\n     margin-top: .5em;\r\n     font-size: 0.9em;\r\n     \r\n     @media only screen and (max-width: 500px){\r\n        font-size:1.5em;\r\n     }\r\n    \r\n`\r\n\r\nconst CtryList = styled.li`    \r\n              list-style: none;\r\n              font-weight:normal;    \r\n              font-size:10px;\r\n              width:80%;\r\n              height: 85%;\r\n              background-color: white;\r\n              font-weight: lighter;\r\n              \r\n              display: grid;\r\n              grid-template-columns: 1fr;\r\n              grid-template-rows: 50% 50%;\r\n              \r\n    \r\n              border-color: hsl(0, 15%, 91%);\r\n              border-radius: .3em;\r\n              box-shadow: 0 0 .5em 0 hsl(0, 15%, 91%);\r\n              margin: 0 0 0.2em 0;\r\n              \r\n               @media only screen and (max-width: 500px){\r\n                     width:90%;\r\n                     border-radius: .5em;\r\n                     height: 92%;\r\n                }\r\n              \r\n`\r\n\r\nconst CountryImage = styled.img`\r\n                \r\n                width:100%;\r\n                height:100%;\r\n                border:none;\r\n                object-fit:fill;\r\n               \r\n                \r\n`\r\n\r\nconst Div = styled.div`\r\n    padding:0;\r\n    margin: 1em 1em 0 1em;\r\n    \r\n     @media only screen and (max-width: 500px){\r\n     \r\n        margin: 1.5em 1em 0 2em;\r\n     }\r\n\r\n`\r\n\r\nconst CountryName = styled.p`\r\n    font-weight:bold;\r\n    margin:0;\r\n    padding: 0 0 0.5em 0;\r\n    font-size:1.3em;\r\n    \r\n     @media only screen and (max-width: 500px){\r\n        font-size:2em;\r\n     }\r\n    \r\n`\r\n\r\n\r\n\r\n/*\r\n<Link\r\n                to={`/countries/${props.name}`}\r\n            >\r\n                Details\r\n            </Link>\r\n */\r\nexport default CountryItem","\r\nimport CountryItem from \"./CountryItem\";\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst CountryList = (props) => {\r\n\r\n    const countries = props.countries;\r\n\r\n    return (\r\n\r\n            <Countrylist >\r\n                {   countries.map((country) => (\r\n                        <CountryItem\r\n                            key={country.id}\r\n                            id={country.id}\r\n                            name={country.name}\r\n                            capital={country.capital}\r\n                            population={country.population}\r\n                            region={country.region}\r\n                            flagimage={country.flagimage}\r\n                        />\r\n                ))}\r\n            </Countrylist>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst Countrylist = styled.ul`\r\n    margin: 1em 0 1em 2em;\r\n    display:grid;\r\n    grid-template-columns:1fr 1fr 1fr 1fr;\r\n    grid-template-rows:17em;\r\n    grid-auto-rows:17em;\r\n    column-gap:1em;\r\n    padding:0;     \r\n      @media only screen and (max-width: 500px){\r\n    \r\n         grid-template-columns: 1fr;\r\n         grid-template-rows:25em;\r\n         grid-auto-rows:25em;\r\n         column-gap:0;\r\n    }\r\n`\r\n\r\n\r\nexport default CountryList","import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n                                                            status: startWithPending ? 'pending' : null,\n                                                            data: null,\n                                                            error: null,\n                                                          });\n\n  const sendRequest = useCallback(\n\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const RESTCOUNTRIES_DOMAIN = 'https://restcountries.eu/rest/v2';\n\nexport async function getAllCountries() {\n\n  //https://restcountries.eu/rest/v2/all\n\n  const response = await fetch(`${RESTCOUNTRIES_DOMAIN}/all`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch countries.');\n  }\n\n  const transformedCountries = [];\n\n  for (const countryObject in data) {\n    /*console.log( ' line ' + `${data[countryObject].flag}`)*/\n    let countryName = `${data[countryObject].name}`;\n    const countryObj = {\n      id:countryName,\n      name:countryName,\n      capital:`${data[countryObject].capital}`,\n      population:`${data[countryObject].population}`,\n      region:`${data[countryObject].region}`,\n      flagimage:`${data[countryObject].flag}`\n    }\n   \n   transformedCountries.push(countryObj)\n  }\n\n  return transformedCountries;\n\n}\n\nexport async function getCountriesFromSingleRegion(regionId) {\n  //https://restcountries.eu/rest/v2/region/europe\n\n  const response = await fetch(`${RESTCOUNTRIES_DOMAIN}/region/${regionId}`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || `Could not fetch countries from region ${regionId}`);\n  }\n\n  const transformedCountries = [];\n\n  for (const countryObject in data) {\n    let countryName = `${data[countryObject].name}`;\n    const countryObj = {\n      id:countryName,\n      name:countryName,\n      capital:`${data[countryObject].capital}`,\n      population:`${data[countryObject].population}`,\n      region:`${data[countryObject].region}`,\n      flagimage:`${data[countryObject].flag}`\n    }\n\n    transformedCountries.push(countryObj)\n  }\n\n  return transformedCountries;\n}\n\nexport async function getSingleCountry(countryId) {\n\n  //https://restcountries.eu/rest/v2/name/eesti\n  const response = await fetch(`${RESTCOUNTRIES_DOMAIN}/name/${countryId}`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch country details.');\n  }\n  let countryInfoDataObj = {\n    'nativeName':'',\n    'population':'',\n    'region':'',\n    'subregion':'',\n    'capital':'',\n    'borders':'',\n    'topLevelDomain':'',\n    'currencies':'',\n    'languages':'',\n    'flag' : ''\n  }\n  if(data.length > 1){\n    for(let key in data){\n      if(data[key].name === countryId){\n\n        countryInfoDataObj = data[key];\n      }\n    }\n  }else{\n    countryInfoDataObj= data[0] ;\n  }\n  let loadedCountryInfo = { id: countryId, ...countryInfoDataObj , flagimage: countryInfoDataObj.flag}\n\n\n\n  return loadedCountryInfo;\n}\n\nexport async function getSingleCountryByThreeLetterCode(countryId) {\n\n\n  //https://restcountries.eu/rest/v2/name/eesti\n  const response = await fetch(`${RESTCOUNTRIES_DOMAIN}/alpha/${countryId}`);\n  const data = await response.json();\n\n  if (!response.ok) { console.log('error')\n    throw new Error(data.message || 'Could not fetch country details.');\n  }\n  const { nativeName,name,\n    population, region ,\n    subregion,capital ,borders,topLevelDomain, currencies,languages } = data ;\n\n  const loadedCountry = {\n    id: countryId,name,\n    nativeName,population,region,subregion,capital,borders,topLevelDomain,currencies,languages\n  };\n  return loadedCountry;\n}\n\n\n","import classes from './LoadingSpinner.module.css';\n\nconst LoadingSpinner = () => {\n  return <div className={classes.spinner}></div>;\n}\n\nexport default LoadingSpinner;\n","\n\n\nconst NoCountriesFound = () => {\n  return (\n    <div >\n      <p>No countries found!</p>\n     {/* <Link className={classes.btn} to='/new-quote'>\n        Add a Quote\n      </Link>*/}\n\n    </div>\n  );\n};\n\nexport default NoCountriesFound;\n","import classes from './RegionDropDown.module.css';\r\nimport {Fragment} from \"react\";\r\n\r\nimport DarkModeContext from \"../../store/darkmode-context\";\r\nimport React, { useContext } from 'react';\r\n\r\n\r\nconst RegionDropDown = (props) =>{\r\n    const ctx = useContext(DarkModeContext);\r\n    const showCountriesFromRegion = (event) =>{\r\n        event.preventDefault();\r\n        console.log(event.target.value)\r\n        props.pullCountriesFromSelectedRegion(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n\r\n            <Fragment>\r\n\r\n                <select className={classes.select_dropdown}\r\n                        name=\"region\" id=\"region\" defaultValue={'DEFAULT'}\r\n                        onChange={showCountriesFromRegion}\r\n                        style={{backgroundColor : ctx.isDarkMode ? colors.topHeaderDarkBgCol : colors.topHeaderLightBgCol,\r\n                                boxShadow:ctx.isDarkMode ? colors.darkModeBoxShadow : colors.lightModeBoxShadow,\r\n                                color:  ctx.isDarkMode ? 'white': 'black'}}>\r\n\r\n                    <option  value=\"DEFAULT\" disabled>Filter by Region   &nbsp;&nbsp; </option>\r\n                    <option  value=\"Africa\">Africa</option>\r\n                    <option  value=\"Americas\">Americas </option>\r\n                    <option  value=\"Asia\">Asia</option>\r\n                    <option  value=\"Europe\">Europe</option>\r\n                    <option  value=\"Oceania\">Oceania</option>\r\n                </select>\r\n            </Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport const colors = {\r\n    darkModeBackgroundColour : 'hsl(207, 26%, 17%)' ,\r\n    lightModeBackgroundColour : 'hsl(0, 0%, 98%)',\r\n    topHeaderDarkBgCol : 'hsl(207, 16%, 22%)',\r\n    topHeaderLightBgCol : '#ffffff',\r\n\r\n    lightModeBoxShadow: '0 0 .5em 0 rgb(235, 229, 229)',\r\n    darkModeBoxShadow:  '0 0 .5em 0 rgb(37, 40, 43)',\r\n}\r\n/*const Select =  styled.select`\r\n                    margin: 2em 2.4em 1em 0;\r\n                    border: none;\r\n                    outline: none;\r\n                    height: 3.2em;\r\n                    padding: 1em 0 1em 1em;\r\n                    width: 45%;\r\n                    border-radius: .2em;\r\n                    align-self: center;\r\n                    justify-self: end;\r\n                    box-shadow: 0 0 .5em 0 hsl(0, 15%, 91%);\r\n                    font-family: inherit;\r\n                    &:focus{\r\n                    box-shadow: 0 0 .5em 0 hsl(0, 15%, 82%);\r\n                }  \r\n\r\n`*/\r\nexport default RegionDropDown","import {Fragment, useEffect} from 'react'\r\nimport CountryList from '../components/Countries/CountryList'\r\nimport useHttp from '../hooks/use-http';\r\nimport { getAllCountries } from '../lib/api';\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport classes from '../index.css'\r\nimport NoCountriesFound from \"../components/Countries/NoCountriesFound\";\r\nimport RegionDropDown from \"../components/UI/RegionDropDown\";\r\n//import RegionalCountries from \"../components/Countries/RegionalCountries\";\r\nimport {  useHistory } from 'react-router-dom';\r\nimport SearchBox from \"../components/UI/SearchBox\";\r\n//import allcountriesclass from './AllCountries.module.css'\r\nimport styled from \"styled-components\";\r\n\r\nconst AllCountries = (props) => {\r\n\r\n    const {sendRequest, status, data: loadedCountries, error} = useHttp(getAllCountries, true)\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect( () => {\r\n        sendRequest();\r\n    }, [sendRequest])\r\n\r\n    if(status === 'pending')\r\n    {\r\n        return <div className={classes.centered}>\r\n                    <LoadingSpinner/>\r\n                </div>\r\n    }\r\n\r\n    const errorStyles = classes.centered + ' '+ classes.focused\r\n    if(error){\r\n        return <p className={errorStyles}>{error}</p>\r\n    }\r\n\r\n    if(status === 'completed' && (!loadedCountries || loadedCountries.length === 0)){\r\n        return <NoCountriesFound/>\r\n    }\r\n\r\n    const pullCountriesFromSelectedRegion = (selectedRegion) =>{\r\n\r\n        history.push(`/region/${selectedRegion}`)\r\n    }\r\n\r\n\r\n    return(\r\n            <Fragment>\r\n\r\n                <Div id='sr-reg'>\r\n                    <SearchBox />\r\n                    <RegionDropDown\r\n                        pullCountriesFromSelectedRegion={pullCountriesFromSelectedRegion}\r\n                    />\r\n                </Div>\r\n                <CountryList  countries={loadedCountries}/>\r\n            </Fragment>\r\n\r\n    )\r\n}\r\n\r\nconst Div =  styled.div`\r\n     display:grid; \r\n     grid-template-columns: 1fr 1fr;\r\n     grid-template-rows: 1fr; \r\n     \r\n     @media only screen and (max-width: 500px){\r\n        grid-template-columns: 1fr;\r\n        grid-template-rows: 1fr 1fr; \r\n     }\r\n`\r\n\r\nexport default AllCountries","const NotFound = () => {\n  return (\n    <div className='centered'>\n      <p>Page not found!</p>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import useHttp from \"../../hooks/use-http\";\r\n\r\nimport { getSingleCountryByThreeLetterCode} from \"../../lib/api\";\r\nimport { Link} from \"react-router-dom\";\r\nimport classes from \"../../index.css\";\r\nimport styled from 'styled-components';\r\n//import cssBorderCountry from './BorderCountryList.module.css'\r\nimport DarkModeContext from '../../store/darkmode-context'\r\n\r\nimport React, { useContext , useEffect} from 'react';\r\n\r\nconst BorderCountryList = (props) =>{\r\n    const {sendRequest, status, data: loadedCountry, error} = useHttp(getSingleCountryByThreeLetterCode, true)\r\n    const ctx = useContext(DarkModeContext);\r\n    const threeLetterCountryCode = props.borderCountry;\r\n\r\n    useEffect( () => {\r\n        sendRequest(threeLetterCountryCode)\r\n    }, [sendRequest, threeLetterCountryCode])\r\n\r\n\r\n\r\n    if(status === 'pending'){\r\n        return <div className={classes.centered}>\r\n                   ...Loading\r\n               </div>\r\n    }\r\n\r\n  // const errorStyles = classes.centered + ' '+ classes.focused\r\n   /* if(error){\r\n        return <p className={errorStyles}>{error}</p>\r\n    }*/\r\n    if(error){\r\n        return null\r\n    }\r\n\r\n    if(status === 'completed' && (!loadedCountry.name )){\r\n        return null\r\n    }\r\n\r\n    return   (<ListStyle ctx={ctx}  id='listinctry'>\r\n                <StyledLink\r\n                      to={`/country/${loadedCountry.name}`}>\r\n                        {loadedCountry.name}\r\n                </StyledLink>\r\n             </ListStyle>)\r\n\r\n}\r\n\r\nconst StyledLink = styled(Link)`\r\n\r\n    font-size: 9px;\r\n    padding: .3em .5em .3em .5em;\r\n    border-width: thin;\r\n    border-color: hsl(0, 15%, 91%);\r\n    border-radius: .2em;\r\n    box-shadow: 0 0 .5em 0 hsl(0 , 28%, 79%);\r\n    font-family: inherit;\r\n    text-decoration:none;\r\n    color: inherit;\r\n    \r\n    @media only screen and (max-width: 500px){\r\n         \r\n         font-size: .8em;\r\n         padding: 0.3em 0.6em 0.3em 0.6em;\r\n         box-shadow: 0 0 .5em 0 hsl(0 , 6%, 67%);\r\n         border-radius: .3em;\r\n    }\r\n    \r\n`\r\n/*const linkStyle = styled.Link`\r\n    font-size: 9px;\r\n    padding: .3em .5em .3em .5em;\r\n    border-width: thin;\r\n    border-color: hsl(0, 15%, 91%);\r\n    border-radius: .2em;\r\n    box-shadow: 0 0 .5em 0 hsl(0 , 28%, 79%);\r\n    font-family: inherit;\r\n    text-decoration:none;\r\n    color: inherit;\r\n`*/\r\nconst ListStyle = styled.li`\r\n\r\n    list-style: none;\r\n    margin: 0 0 0 .35em;\r\n    padding: 0;\r\n    color: ${props => (props.ctx.isDarkMode ? 'white' : 'hsl(0, 100%, 5%)')}; \r\n    \r\n    @media only screen and (max-width: 500px){\r\n    \r\n          margin: 0.4em 0 0 0em;\r\n          \r\n          &:nth-child(1){\r\n           margin-left: 0;\r\n          }\r\n          \r\n    }\r\n\r\n`\r\n/*const linkStyle = {\r\n    'fontSize': '9px',\r\n    'padding': '.3em .5em .3em .5em',\r\n    'borderWidth': 'thin',\r\n    'borderColor': 'hsl(0, 15%, 91%)',\r\n    'borderRadius': '.2em',\r\n    'boxShadow': '0 0 .5em 0 hsl(0, 28%, 79%)',\r\n    'fontFamily': 'inherit',\r\n    'textDecoration': 'none',\r\n    'color':'inherit',\r\n\r\n\r\n}*/\r\n\r\n\r\n\r\nexport default BorderCountryList\r\n","import {useParams,  useHistory} from 'react-router-dom';\r\n\r\nimport useHttp from \"../hooks/use-http\";\r\nimport {getSingleCountry} from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport classes from \"../index.css\";\r\nimport NotFound from './NotFound'\r\nimport BorderCountryList from \"../components/Countries/BorderCountryList\";\r\nimport styled from 'styled-components';\r\nimport cssCountryDetails from './CountryDetails.module.css'\r\n\r\nimport DarkModeContext from '../store/darkmode-context'\r\n\r\nimport React, { useContext, Fragment, useEffect } from 'react';\r\n\r\nconst CountryDetail = (props) => {\r\n    const params = useParams();\r\n    const {countryNameId } = params ;\r\n    const {sendRequest, status, data: loadedCountry, error} = useHttp(getSingleCountry, true)\r\n    const history = useHistory();\r\n    const ctx = useContext(DarkModeContext);\r\n\r\n    useEffect( () => {\r\n\r\n        sendRequest(countryNameId)\r\n    }, [sendRequest, countryNameId])\r\n\r\n\r\n\r\n    const goBackToPreviousPage = () =>{\r\n        history.goBack();\r\n    }\r\n    if(status === 'pending'){\r\n        return <div className={classes.centered}>\r\n            <LoadingSpinner/>\r\n        </div>\r\n    }\r\n\r\n    const errorStyles = classes.centered + ' '+ classes.focused\r\n    if(error){\r\n        return <p className={errorStyles}>{error}</p>\r\n    }\r\n\r\n    if(status === 'completed' && (!loadedCountry.nativeName )){\r\n        return <NotFound />\r\n    }\r\n\r\n    let borderCountries = null ;\r\n\r\n    if( loadedCountry.borders !== null ||  loadedCountry.borders !== undefined){\r\n\r\n       borderCountries = (\r\n            <ul className={cssCountryDetails.ulStyle}>\r\n                {\r\n                    loadedCountry.borders.map( ( country) => (\r\n\r\n                       <BorderCountryList key={country} borderCountry={country}/>\r\n                        )\r\n                    )\r\n                 }\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    let arrayOfLangForEachCountry = [];\r\n\r\n\r\n    for(let lang in loadedCountry.languages){\r\n        //console.log(`${lang}: ${loadedCountry.languages[lang].name}`);\r\n        arrayOfLangForEachCountry.push(loadedCountry.languages[lang].name);\r\n    }\r\n\r\n    let languagesOfEachCountry = null;\r\n    languagesOfEachCountry = (\r\n        <ul className={cssCountryDetails.ulLangStyle}>\r\n            {\r\n                arrayOfLangForEachCountry.map(( lang, index) => {\r\n                    if(index+1 === arrayOfLangForEachCountry.length){\r\n                        return <ListOfLangEachCtry ctx={ctx} className={cssCountryDetails.eachLangList} key={lang}>{lang}</ListOfLangEachCtry>\r\n                    }else{\r\n                        return <ListOfLangEachCtry ctx={ctx} className={cssCountryDetails.eachLangList} key={lang}>{lang},</ListOfLangEachCtry>\r\n                    }\r\n\r\n                }\r\n                )\r\n            }\r\n        </ul>\r\n    )\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n           <DivForBTNandDetails id='divbtnndetails'>\r\n\r\n               <button className={cssCountryDetails.backBtnLink} onClick={goBackToPreviousPage} id='btnbck'>\r\n                  {/* <i className={`${cssCountryDetails.leftArrowBtn} fa fa-long-arrow-left`}></i>*/}\r\n                   <LeftArrowIcon ctx={ctx} className= \"fa fa-long-arrow-left\"></LeftArrowIcon>\r\n                   <BackSpan ctx={ctx}>Back</BackSpan>\r\n               </button>\r\n\r\n\r\n\r\n               <Details id='details'>\r\n                   <CountryImage src={loadedCountry.flagimage} />\r\n                   <div className={cssCountryDetails['sub-details']}>\r\n                       <div className={cssCountryDetails['country-name']}>\r\n                           <CountryNamePtag ctx={ctx}><strong >{countryNameId}</strong></CountryNamePtag>\r\n                       </div>\r\n                       <div className={cssCountryDetails['full-details']}>\r\n                           <Ptag ctx={ctx}><strong >Native Name:</strong> {loadedCountry.nativeName}</Ptag>\r\n                           <Ptag ctx={ctx}><strong >Population:</strong> {loadedCountry.population}</Ptag>\r\n                           <Ptag ctx={ctx}><strong >Region: </strong>{loadedCountry.region}</Ptag>\r\n                           <Ptag ctx={ctx}><strong >Sub Region: </strong>{loadedCountry.subregion}</Ptag>\r\n                           <Ptag ctx={ctx}><strong >Capital: </strong>{loadedCountry.capital}</Ptag>\r\n                           <Ptag ctx={ctx}><strong >Top Level Domain: </strong>{loadedCountry.topLevelDomain}</Ptag>\r\n                           <Ptag ctx={ctx}><strong >Currencies: </strong>{loadedCountry.currencies[0].name}</Ptag>\r\n                          {/* <Ptag ><strong >Languages: </strong></Ptag>{languagesOfEachCountry}*/}\r\n                           {/*<Ptag ><strong >Languages: </strong>{loadedCountry.languages[0].name}</Ptag>*/}\r\n                           <div >\r\n                               <SpanBorder ctx={ctx}><strong>Languages:</strong>\r\n                               </SpanBorder>\r\n                               {languagesOfEachCountry}\r\n                           </div>\r\n\r\n                       </div>\r\n\r\n\r\n                      <div className={cssCountryDetails['brdlist']}>\r\n                          <SpanBorder  ctx={ctx}><strong>Border Countries:</strong>\r\n                            </SpanBorder>\r\n                          {borderCountries !== null ? borderCountries: null}\r\n                      </div>\r\n\r\n\r\n                   </div>\r\n\r\n               </Details>\r\n           </DivForBTNandDetails>\r\n\r\n\r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nconst DivForBTNandDetails = styled.div`\r\n\r\n     display: grid;\r\n     grid-template-columns: 1fr;\r\n     grid-template-rows: 110px auto;\r\n     justify-content: center;\r\n     align-items: center;\r\n     row-gap: 0;\r\n     column-gap: 0;   \r\n     outline: none;\r\n     \r\n     @media only screen and (max-width: 500px){ \r\n     \r\n        grid-template-rows: 110px auto auto;\r\n        \r\n     }\r\n`\r\nconst LeftArrowIcon = styled.i`\r\n     padding:0;\r\n    margin: 0;\r\n    font-size: 1.6em;\r\n    color: ${props => (props.ctx.isDarkMode ? 'white' : 'hsl(0, 100%, 5%)')};\r\n`\r\n\r\nconst BackSpan= styled.span`\r\n    text-align: center;\r\n   \r\n    padding:0;\r\n    font-family: inherit;\r\n    font-size: 11px;\r\n   justify-self:start;\r\n   color: ${props => (props.ctx.isDarkMode ? 'white' : 'hsl(0, 100%, 5%)')};\r\n`\r\n\r\nconst Details = styled.div`\r\n            font-weight: lighter;\r\n            display: grid;\r\n     grid-template-columns: 1fr 1fr;\r\n     grid-template-rows: 1fr;\r\n     justify-content: center;\r\n     align-items: center;\r\n     row-gap: 0;\r\n     column-gap: 0;   \r\n     outline: none;\r\n     \r\n     @media only screen and (max-width: 500px){ \r\n        grid-template-columns: 1fr;\r\n        grid-template-rows: 13em 2fr;\r\n        justify-content: center;\r\n        align-items: center;\r\n     }\r\n            \r\n`\r\nconst CountryImage = styled.img`\r\n                \r\n                width:75%;\r\n                height:70%;\r\n                border:none;\r\n                object-fit:fill;\r\n                margin:0.5em 0 0 2em;\r\n                border:none;\r\n                padding:none;\r\n                align-self:center;\r\n               \r\n                @media only screen and (max-width: 500px){\r\n                    align-self: start ;\r\n                    height:78%;\r\n                    object-fit: contain;\r\n                    margin:0.5em 0 0 1.3em;\r\n                    width: 50%;\r\n                }\r\n                \r\n`\r\nconst CountryNamePtag = styled.p`\r\n        font-size:16px;\r\n        color: ${props => (props.ctx.isDarkMode ? 'white' : 'hsl(0, 100%, 5%)')};\r\n        \r\n        @media only screen and (max-width: 500px){ \r\n            font-size:1.7em;\r\n        }\r\n`\r\nconst Ptag = styled.p`\r\n         \r\n     font-size:10px;\r\n     color: ${props => (props.ctx.isDarkMode ? 'white' : 'hsl(0, 100%, 5%)')};\r\n    \r\n      @media only screen and (max-width: 500px){ \r\n            font-size:1em;\r\n            margin: .4em 0 .4em 0;\r\n        }\r\n    \r\n`\r\nconst SpanBorder= styled.span`\r\n     font-size:10px;\r\n     color: ${props => (props.ctx.isDarkMode ? 'white' : 'hsl(0, 100%, 5%)')}; \r\n     @media only screen and (max-width: 500px){ \r\n            font-size:1em;\r\n        }\r\n`\r\n\r\nconst ListOfLangEachCtry = styled.li`\r\n     list-style: none;\r\n    padding: 0;\r\n    margin: 0 0 0 0.2em;\r\n    font-family: inherit;\r\n    text-decoration: none;\r\n    font-size: 10px;\r\n    color: ${props => (props.ctx.isDarkMode ? 'white' : 'hsl(0, 100%, 5%)')};\r\n     @media only screen and (max-width: 500px){ \r\n            font-size:1em;\r\n        }\r\n     \r\n`\r\n\r\n\r\n\r\n\r\n/*\r\nconst Div = styled.div`\r\n     display: grid;\r\n     grid-template-columns: 1fr;\r\n     grid-template-rows: 150px auto;\r\n     justify-content: center;\r\n     align-items: center;\r\n     row-gap: 0;\r\n     column-gap: 0;   \r\n     outline: none;\r\n\r\n`*/\r\n\r\n/*const BackBtn = styled.a`\r\n    margin:0; \r\n    width: 7em;\r\n    margin:4.5% 0 0 3.2em;\r\n    align-self: start;\r\n    font-size:unset;\r\n    border-width: thin;\r\n    border-color: hsl(0, 15%, 91%);\r\n    border-radius: .2em;\r\n    box-shadow: 0 0 .5em 0 hsl(0, 28%, 79%);\r\n    font-family: inherit;\r\n    text-decoration: none;\r\n    text-align: center;\r\n    padding: .3em .5em .3em .5em;\r\n    \r\n    display:grid;\r\n     grid-template-columns: 1fr 1fr;\r\n     grid-template-rows: auto;\r\n     justify-content: center;\r\n     align-items: center;\r\n              \r\n`*/\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default CountryDetail;","\r\nimport styled from 'styled-components';\r\nimport {useContext} from \"react\";\r\nimport DarkModeContext from \"../../store/darkmode-context\";\r\n\r\nconst MainSection = (props) =>{\r\n    const ctx = useContext(DarkModeContext);\r\n\r\n\r\n      return  (<MainSec ctx={ctx} id='mainsec'>\r\n                    {props.children}\r\n               </MainSec>)\r\n\r\n}\r\n\r\nexport const colors = {\r\n    darkModeBorderColour : 'hsl(207, 12%, 21%)' ,\r\n    lightModeBorderColour : 'hsl(0, 12%, 87%)'\r\n}\r\n\r\nconst MainSec = styled.div`\r\n     padding:0;\r\n     margin:0;\r\n     border:none;\r\n     width:inherit;\r\n     box-shadow:3px -1px 2px 0 ${props =>  props.ctx.isDarkMode ? colors.darkModeBorderColour : colors.lightModeBorderColour }; \r\n     \r\n     @media only screen and (max-width: 500px){\r\n        min-height: inherit;\r\n     }\r\n`;\r\n\r\nexport default MainSection","import { createGlobalStyle } from 'styled-components';\r\n\r\n\r\nexport default createGlobalStyle`\r\n\r\n  body {\r\n    padding: 0;\r\n    margin:  0px !important;\r\n    font-family: 'Nunito Sans', sans-serif;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n    \r\n`;\r\n\r\n/*\r\n\r\n\r\nexport default createGlobalStyle`\r\n\r\n\r\n @import url('https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;600;800&display=swap');\r\n\r\n  body {\r\n    padding: 0;\r\n    margin: 0;\r\n    font-family: 'Nunito Sans', sans-serif;\r\n  }\r\n\r\n`;*/\r\n","import React, { useContext } from 'react';\r\n\r\nimport {Fragment} from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nimport MainSection from \"./MainSection\";\r\n\r\nimport GlobalFonts from './../../styles/GlobalFonts'\r\nimport DarkModeContext from './../../store/darkmode-context'\r\n\r\n\r\nconst Layout = (props) => {\r\n    const ctx = useContext(DarkModeContext);\r\n   // const styles = classes['app-contianer'] + ' '+ classes['app-contianer-primary']\r\n\r\n    return (\r\n        <Fragment>\r\n            <GlobalFonts/>\r\n            <Page ctx={ctx}  id='fullpage'>\r\n                <PageLayout id='pglayout'>\r\n                {/*    <TopHeader />*/}\r\n                    <MainSection  >\r\n                        <Main id='main' >\r\n                            {props.children}\r\n                        </Main>\r\n                    </MainSection>\r\n\r\n                </PageLayout>\r\n\r\n            </Page>\r\n        </Fragment>\r\n\r\n\r\n    );\r\n};\r\n\r\nexport const colors = {\r\n    darkModeBackgroundColour : 'hsl(207, 26%, 17%)' ,\r\n    lightModeBackgroundColour : 'hsl(0, 0%, 98%)'\r\n}\r\n\r\n/*const Page = styled.div`\r\n  position: relative;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n  display: grid;\r\n  place-items: center;\r\n  transition: .5s;\r\n  background-color: ${props => (props.ctx.isDarkMode ?   colors.darkModeBackgroundColour : colors.lightModeBackgroundColour )};\r\n  \r\n`;*/\r\n\r\nconst Page = styled.div`\r\n  position: relative;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n \r\n  transition: .5s;\r\n  background-color: ${props => (props.ctx.isDarkMode ?   colors.darkModeBackgroundColour : colors.lightModeBackgroundColour )};\r\n  \r\n  \r\n  @media only screen and (max-width: 500px){\r\n     min-height: 100vh;\r\n  }\r\n`;\r\nconst PageLayout = styled.div`\r\n    \r\n     display: flex;\r\n     flex-direction: column;\r\n     width: 100%;\r\n     \r\n     @media only screen and (max-width: 500px){\r\n        min-height: 100vh;\r\n     }\r\n\r\n`\r\n\r\nconst Main = styled.div`\r\n    \r\n    display:grid; \r\n    grid-template-columns: auto;\r\n    grid-template-rows: auto auto; \r\n    \r\n     @media only screen and (max-width: 500px){\r\n        grid-template-rows: auto auto auto; \r\n     } \r\n    \r\n`\r\n\r\nexport default Layout;","import {Fragment, useEffect} from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport {getCountriesFromSingleRegion} from \"../../lib/api\";\r\nimport classes from \"../../index.css\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport NoCountriesFound from \"./NoCountriesFound\";\r\nimport RegionDropDown from \"../UI/RegionDropDown\";\r\nimport CountryList from \"./CountryList\";\r\nimport SearchBox from \"../UI/SearchBox\";\r\nimport styled from \"styled-components\";\r\n\r\nconst RegionalCountries = (props) =>{\r\n    const {sendRequest, status, data: loadedCountries, error} = useHttp(getCountriesFromSingleRegion, true);\r\n    const { regionNameId} = useParams();\r\n    const history = useHistory();\r\n\r\n\r\n    useEffect( () => {\r\n        sendRequest(regionNameId);\r\n    }, [sendRequest, regionNameId])\r\n\r\n    if(status === 'pending'){\r\n        return <div className={classes.centered}>\r\n            <LoadingSpinner/>\r\n        </div>\r\n    }\r\n\r\n    const errorStyles = classes.centered + ' '+ classes.focused\r\n    if(error){\r\n        return <p className={errorStyles}>{error}</p>\r\n    }\r\n\r\n    if(status === 'completed' && (!loadedCountries || loadedCountries.length === 0)){\r\n        return <NoCountriesFound/>\r\n    }\r\n    const pullCountriesFromSelectedRegion = (selectedRegion) =>{\r\n\r\n        history.push(`/region/${selectedRegion}`)\r\n    }\r\n\r\n    return (\r\n\r\n            <Fragment>\r\n                <Div id='sr-reg'>\r\n                    <SearchBox />\r\n                    <RegionDropDown\r\n                        pullCountriesFromSelectedRegion={pullCountriesFromSelectedRegion}\r\n                    />\r\n                </Div>\r\n                <CountryList  countries={loadedCountries}/>\r\n            </Fragment>\r\n    )\r\n\r\n}\r\n\r\nconst Div =  styled.div`\r\n      display:grid; \r\n     grid-template-columns: 1fr 1fr;\r\n     grid-template-rows: 1fr; \r\n     \r\n     @media only screen and (max-width: 500px){\r\n        grid-template-columns: 1fr;\r\n        grid-template-rows: 1fr 1fr; \r\n     }\r\n`\r\n\r\nexport default RegionalCountries","import classes from './TopHeader.module.css'\r\nimport styled from 'styled-components';\r\nimport React, { useContext } from 'react';\r\nimport DarkModeContext from \"../../store/darkmode-context\";\r\n\r\nconst TopHeader = (props) => {\r\n    const ctx = useContext(DarkModeContext);\r\n\r\n    const stylesForToggleLight = ctx.isDarkMode ?  `fas fa-moon ${classes.pointer}` : `far fa-moon ${classes.pointer}`\r\n\r\n    return (\r\n\r\n            <HeaderSection ctx={ctx} id='header-sec'>\r\n\r\n                   <Where  ctx={ctx} id='where'>Where in the world?</Where>\r\n                   <Mode ctx={ctx} id='mode'>\r\n                        {\r\n                            ctx.isDarkMode ? <LightORDarkLogo1><i className={stylesForToggleLight} onClick={ctx.switchBtwDarkAndLight}></i> </LightORDarkLogo1>\r\n                                        : <LightORDarkLogo1><i className={stylesForToggleLight} onClick={ctx.switchBtwDarkAndLight}></i> </LightORDarkLogo1>\r\n                        }\r\n                        <LightOrDarkText ctx={ctx}>Dark Mode</LightOrDarkText>\r\n                   </Mode>\r\n            </HeaderSection>\r\n\r\n    )\r\n}\r\n\r\nexport const colors = {\r\n    darkModeBackgroundColour : 'hsl(207, 26%, 17%)' ,\r\n    lightModeBackgroundColour : 'hsl(0, 0%, 98%)',\r\n\r\n    topHeaderDarkBgCol : 'hsl(207, 16%, 22%)',\r\n    topHeaderLightBgCol : '#ffffff',\r\n}\r\n\r\nconst HeaderSection = styled.div`\r\n\r\n     display: grid;\r\n     grid-template-columns: 1fr 1fr;\r\n     justify-content: center;\r\n     align-items: center;\r\n     row-gap: 0;\r\n     column-gap: 0;   \r\n     outline: none;\r\n     height:4em;\r\n     background-color: ${ (props) =>  props.ctx.isDarkMode ? colors.topHeaderDarkBgCol : colors.topHeaderLightBgCol };\r\n     \r\n`\r\n\r\nconst Where = styled.div`\r\n      justify-self: start;\r\n      margin:1em 0 1em 2em ;\r\n      color: ${ (props) =>  props.ctx.isDarkMode ? '#ffffff' : '#000000' };\r\n      font-weight: bold;\r\n`\r\n\r\nconst Mode = styled.div`\r\n      justify-self: end;\r\n      margin:1em 2em 1em 0 ;    \r\n      display:flex; \r\n      color: ${ (props) =>  props.ctx.isDarkMode ? '#ffffff' : '#000000' };      \r\n`\r\n\r\n\r\n\r\nconst LightOrDarkText = styled.div`\r\n    margin:0 ;\r\n    padding:0;\r\n    color: ${ (props) =>  props.ctx.isDarkMode ? '#ffffff' : '#000000' };\r\n`\r\n\r\nconst LightORDarkLogo1 = styled.a`\r\n    margin:0 .5em 0 .1em;\r\n    padding:0;\r\n    border:none;\r\n`\r\n\r\n\r\nexport default TopHeader","\n\nimport AllCountries from './pages/AllCountries'\nimport CountryDetail from './pages/CountryDetail'\nimport NotFound from \"./pages/NotFound\";\nimport Layout from \"./components/Layout/Layout\";\nimport RegionalCountries from \"./components/Countries/RegionalCountries\";\n\nimport 'font-awesome/css/font-awesome.min.css'\nimport { BrowserRouter ,Route, Switch, Redirect } from 'react-router-dom';\nimport TopHeader from \"./components/Layout/TopHeader\";\nfunction App() {\n  return (\n      <BrowserRouter>\n\n            <Layout >\n                <TopHeader />\n                <Switch>\n\n\n                    <Route path='/countries' exact>\n                        <AllCountries/>\n                    </Route>\n\n                    <Route path='/country/:countryNameId' exact>\n                        <CountryDetail/>\n                    </Route>\n\n                    <Route path='/region/:regionNameId' exact>\n                        <RegionalCountries/>\n                    </Route>\n\n\n\n                    <Route path='/' exact>\n                        <Redirect to='/countries' />\n                    </Route>\n\n                    <Route path='*'>\n                        <NotFound />\n                    </Route>\n                </Switch>\n\n            </Layout>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\n\nimport App from './App';\nimport {DarkModeContextProvider} from './store/darkmode-context'\n\nReactDOM.render(\n\n\n              <DarkModeContextProvider>\n                 <App />\n              </DarkModeContextProvider>\n\n\n             ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}